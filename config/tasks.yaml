# Tasks configuration (Hello World style)

# Tasks configuration notes:
# - Set 'human_input: true' on a task to require interactive human confirmation/inputs
#   during execution (supported CrewAI versions only). If unsupported, the field
#   will be ignored gracefully.
# - You can continue to define tasks with 'description', 'expected_output', 'context',
#   and optional 'output_file' as usual.

web_content_research_task:
  description: >
    Conduct a thorough research about {topic}.
    Make sure you find any interesting and relevant information and delegate to create the output file.
  expected_output: >
    A concise list of the 5 most relevant bullet points about {topic}.


reporting_task:
  description: >
    Use ONLY the context from web_content_research_task and turn these into a brief, clear section as bullet points.
    Then save the final markdown report to output/report_{topic}.md.
    Prefer using the file_write tool configured for the 'output' directory with:
      - filename: "report_{topic}.md"
      - content: <your generated markdown>
  expected_output: >
    A markdown report (no code fences) with a short introduction and one section per bullet point.
  context:
    - web_content_research_task
  output_file: output/report_{topic}.md
  # Set to true to enable interactive confirmation/input during this task
  human_input: false


# ----- Crew Composer Workflow -----

requirements_intake_task:
  description: >
    Interview the human to gather precise requirements for a new crew configuration named {crew_name}.
    Ask about: purpose, domain, scope, key tasks, inputs/outputs, target users, success criteria,
    constraints (budget/time/risk/privacy), required tools/APIs, LLM/provider preferences,
    observability needs, scheduling triggers, and knowledge sources (files, web docs, RAG).
    Then synthesize a structured requirements brief and any open questions.
  expected_output: >
    A clear requirements brief with sections: Overview, Objectives, Primary Tasks, Inputs/Outputs,
    Constraints & Policies, Tools & Integrations, LLMs & Settings, Knowledge Sources,
    Observability & Scheduling, Acceptance Criteria, Open Questions.
  output_file: output/composer/intake_{crew_name}.md
  human_input: true

architecture_proposal_task:
  description: >
    Propose a high-level crew architecture based on the intake. Decide on process (sequential/hierarchical),
    agents and responsibilities, task pipeline, context flows, knowledge sources to load, and
    tools_files to include. Include rationale and tradeoffs. Keep it executable in this template.
  expected_output: >
    An architecture proposal document summarizing the design decisions and a brief diagram/text
    of the pipeline. Include a checklist of assumptions and risks.
  context:
    - requirements_intake_task
  output_file: output/composer/architecture_{crew_name}.md
  human_input: false

agents_yaml_task:
  description: >
    Produce agents.yaml additions for {crew_name}: roles, goals, backstories, llm aliases, temperatures,
    max_iter, and tool_names. Ensure names are valid identifiers and align with architecture.
  expected_output: >
    A valid YAML snippet ready to merge into config/agents.yaml, containing only new/updated agents
    for {crew_name}.
  context:
    - architecture_proposal_task
    - requirements_intake_task
  output_file: output/composer/agents_{crew_name}.yaml
  human_input: false

tasks_yaml_task:
  description: >
    Produce tasks.yaml additions for {crew_name}. Define each task with description, expected_output,
    context dependencies, and output_file (if any). Prefer small, single-responsibility tasks that
    compose into a pipeline.
  expected_output: >
    A valid YAML snippet ready to merge into config/tasks.yaml with tasks for {crew_name} only.
  context:
    - agents_yaml_task
    - architecture_proposal_task
  output_file: output/composer/tasks_{crew_name}.yaml
  human_input: false

crew_yaml_task:
  description: >
    Produce crews.yaml additions for {crew_name}: process, verbosity, planning, knowledge_sources,
    tools_files, agents list, task_order, and task_agent_map (single or multi-agent mapping per task).
    Keep to features supported by this template.
  expected_output: >
    A valid YAML snippet ready to merge into config/crews.yaml under crews: {crew_name}.
  context:
    - tasks_yaml_task
    - agents_yaml_task
    - architecture_proposal_task
  output_file: output/composer/crews_{crew_name}.yaml
  human_input: false

knowledge_recommendations_task:
  description: >
    Recommend knowledge sources to reference from agents. For each source, specify type, paths/urls,
    and how it will be used. Provide a YAML snippet for agents.knowledge.yaml if new sources are needed.
  expected_output: >
    A short memo and a YAML snippet for agents.knowledge.yaml additions specific to {crew_name}.
  context:
    - requirements_intake_task
    - architecture_proposal_task
  output_file: output/composer/agents.knowledge_{crew_name}.yaml
  human_input: false

tool_recommendations_task:
  description: >
    Recommend tools and optional MCP servers required for {crew_name}. Reference existing entries in
    config/tools.yaml where possible; if new entries are needed, propose YAML snippets for tools.yaml
    and mcp_tools.yaml, and note any API keys. Keep safe defaults.
  expected_output: >
    A recommendations document including ready-to-merge YAML snippets for tools and MCP.
  context:
    - requirements_intake_task
    - architecture_proposal_task
    - agents_yaml_task
  output_file: output/composer/tools_recommendations_{crew_name}.md
  human_input: false

validation_task:
  description: >
    Validate the generated YAML snippets (agents, tasks, crews, knowledge, and tools recommendations)
    for schema correctness, references, and consistency. Identify issues and provide fixed versions
    if needed. Ensure task names, agent names, and contexts align.
  expected_output: >
    A validation report with pass/fail checks and fixed YAML blocks when applicable.
  context:
    - agents_yaml_task
    - tasks_yaml_task
    - crew_yaml_task
    - knowledge_recommendations_task
    - tool_recommendations_task
  output_file: output/composer/validation_{crew_name}.md
  human_input: false

runbook_task:
  description: >
    Create a Runbook for {crew_name}: how to merge YAML snippets, required env vars, how to run via CLI/UI,
    and testing steps. Include sample commands (Windows PowerShell) and a verification checklist.
  expected_output: >
    A concise runbook with step-by-step instructions, commands, and acceptance checks.
  context:
    - validation_task
    - crew_yaml_task
  output_file: output/composer/runbook_{crew_name}.md
  human_input: false
